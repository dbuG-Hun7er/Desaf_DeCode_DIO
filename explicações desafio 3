# TODO: Crie uma lista de dicionários representando os três modelos do Amazon Bedrock, com 'nome', 'pontuacao_desempenho' e 'preco_mensal' :

# TODO: Defina a função 'recomendar_modelo' e seus dois parâmetros 'modelos' e 'orcamento':

# TODO: Verifique se o orçamento fornecido é suficiente. Se o orçamento for inferior a 250, implemente a resposta adequada:
   
        return None, "TODO"

    modelos_dentro_orcamento = [modelo for modelo in modelos if modelo['preco_mensal'] <= orcamento]

    # Caso nenhum modelo esteja dentro do orçamento
    if not modelos_dentro_orcamento:
        modelo_mais_proximo = min(modelos, key=lambda x: abs(x['preco_mensal'] - orcamento))
        return modelo_mais_proximo['nome'], "Este modelo está mais próximo do seu orçamento."

    # Caso todos os modelos estejam dentro do orçamento
    melhor_modelo = max(modelos_dentro_orcamento, key=lambda x: x['pontuacao_desempenho'])
    return melhor_modelo['nome'], "Melhor desempenho dentro do seu orçamento."

# Solicitar orçamento do usuário
orcamento_usuario = float(input())

# Chamada da função para recomendar o modelo
modelo_recomendado, motivo = recomendar_modelo(modelos_disponiveis, orcamento_usuario)

# Saída da recomendação
if modelo_recomendado:
    print(modelo_recomendado + ". " + motivo)
else:
    print(motivo)
--------------------------------------------------------------------------------------------------------
    Explicações

    Importação de Módulos
    import sys
    O módulo sys é usado para interagir com o interpretador Python. Ele permite ler a entrada do usuário e escrever saídas.
    ----------------------------------------------------------------------------------------------------------------------
    Lista de Modelos Disponíveis
modelos_disponiveis = [
    {"nome": "Claude 3 Opus", "pontuacao_desempenho": 9, "preco_mensal": 600},
    {"nome": "Claude 3 Sonnet", "pontuacao_desempenho": 8, "preco_mensal": 450},
    {"nome": "Claude 3 Haiku", "pontuacao_desempenho": 7, "preco_mensal": 350},
]
Esta lista contém dicionários, onde cada dicionário representa um modelo de IA com seu nome, pontuação de desempenho e preço mensal.
---------------------------------------------------------------------------------------------------------------------------------------
Função recomendar_modelo
def recomendar_modelo(modelos, orcamento):
    # Verificar se o orçamento é inferior a 250
    if orcamento < 250:
        return None, "Seu orçamento é muito baixo para recomendar um modelo adequado."

    # Filtrar os modelos que estão dentro do orçamento
    modelos_dentro_orcamento = [modelo for modelo in modelos if modelo['preco_mensal'] <= orcamento]

    # Caso nenhum modelo esteja dentro do orçamento, retornar o mais próximo
    if not modelos_dentro_orcamento:
        modelo_mais_proximo = min(modelos, key=lambda x: abs(x['preco_mensal'] - orcamento))
        return modelo_mais_proximo['nome'], "Este modelo está mais próximo do seu orçamento."

    # Encontrar o modelo com o melhor desempenho dentro do orçamento
    melhor_modelo = max(modelos_dentro_orcamento, key=lambda x: x['pontuacao_desempenho'])
    return melhor_modelo['nome'], "Melhor desempenho dentro do seu orçamento."

    Parâmetros:

modelos: A lista de modelos disponíveis.
orcamento: O orçamento fornecido pelo usuário.
Processo:

Verifica se o orçamento é inferior a 250. Se for, retorna None e uma mensagem dizendo que o orçamento é muito baixo.
Filtra os modelos que estão dentro do orçamento.
Se nenhum modelo estiver dentro do orçamento, encontra o modelo com preço mais próximo do orçamento e retorna o nome desse modelo e uma mensagem explicativa.
Se houver modelos dentro do orçamento, encontra o modelo com a melhor pontuação de desempenho e retorna o nome desse modelo e uma mensagem explicativa.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solicitação do Orçamento do Usuário
orcamento_usuario = float(sys.stdin.read().strip())
Lê a entrada do usuário, que representa o orçamento, e converte essa entrada para um número de ponto flutuante (float).
---------------------------------------------------------------------------------------------------------------------------

Chamada da Função para Recomendar o Modelo
modelo_recomendado, motivo = recomendar_modelo(modelos_disponiveis, orcamento_usuario)
Chama a função recomendar_modelo passando a lista de modelos disponíveis e o orçamento do usuário. Armazena o nome do modelo recomendado e o motivo da recomendação.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Saída da Recomendação
if modelo_recomendado:
    sys.stdout.write(modelo_recomendado + ". " + motivo + "\n")
else:
    sys.stdout.write(motivo + "\n")

    Processo:
Se um modelo foi recomendado (modelo_recomendado não é None), escreve o nome do modelo seguido do motivo.
Se nenhum modelo foi recomendado, escreve apenas o motivo.
----------------------------------------------------------------------------------------------------------------

Resumo do Código
Define uma lista de modelos: Cada modelo tem um nome, pontuação de desempenho e preço mensal.
Função recomendar_modelo: Recomenda o melhor modelo dentro do orçamento ou o modelo mais próximo, se nenhum estiver dentro do orçamento.
Lê o orçamento do usuário: Usando sys.stdin.read().strip().
Chama a função de recomendação: Com a lista de modelos e o orçamento do usuário.
Escreve a recomendação ou motivo: Para a saída padrão (stdout).

